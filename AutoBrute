#!/usr/bin/ruby
##############################################################
##                  PatatorAuto V0.1                         #
##      Wrapper for Patator bruteforce tool                  #
##                                                           #
##          Created by ZigzagSecurity                        #
##                                                           #
##############################################################

require 'optionparser'
require 'colorize'
require 'tty-prompt'
require 'json'
#scrapper nokogiri

# Welcome message
def greetings()
    puts " 
     _         _        ____             _       
    / \\  _   _| |_ ___ | __ ) _ __ _   _| |_ ___ 
   / _ \\| | | | __/ _ \\|  _ \\| '__| | | | __/ _ \\
  / ___ \\ |_| | || (_) | |_) | |  | |_| | ||  __/
 /_/   \\_\\__,_|\\__\\___/|____/|_|   \\__,_|\\__\\___|
                           by ZigzagSecurity V0.1 ".red

end

# Global variables
$running = true
# create the prompt
$prompt = TTY::Prompt.new
$modules = '{"ssh_module":{"desc":"Brute-force SSH","name":"ssh_login"},"ftp_module":{"desc":"Brute-force FTP","name":"ftp_login"}}'

# Options for each modules
$ssh_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"no","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"22","file":"no","is_file":"no"},"user":{"desc":"usernames to test (value or file)","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test (value or file)","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"auth_type":{"desc":"type of password authentication to use [password|keyboard-interactive|auto]","required":"no","value":"","file":"no","is_file":"no"},"keyfile":{"desc":"file with RSA, DSA or ECDSA private key to test","required":"no","value":"","file":"yes","is_file":"no"},"persistent":{"desc":"use persistent connections [1|0]","required":"no","value":"","file":"no","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"Authentication failed","file":"no","is_file":"no"}}'
$ftp_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"no","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"21","file":"no","is_file":"no"},"user":{"desc":"usernames to test (value or file)","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test (value or file)","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"tls":{"desc":"use tls protocol or not [0|1]","required":"no","value":"","file":"no","is_file":"no"},"timeout":{"desc":"Seconds to wait for a response","required":"no","value":"","file":"no","is_file":"no"},"persistent":{"desc":"use persistent connections [1|0]","required":"no","value":"","file":"no","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"Authentication failed","file":"no","is_file":"no"}}'


# Array to keep the options for each module
$array_modules = {"ssh_module" => $ssh_module, "ftp_module" => $ftp_module}

# End message
def bye()
    puts "Okei, bye !"
    $running = false
end

# Display the help
def displayHelp()
    puts "Here is the help"
end

# print the available modules
def printModules()
    modules = JSON.parse($modules)
    puts "\nAvailable modules:\n\n"
    modules.each do |x,y|
        puts "  - #{x}: #{y["desc"]}"
    end
    puts 
end

# execute the command
def run(module_name, options)
    cpt_file = 0
    modules = JSON.parse($modules)

    command = "patator #{modules[module_name]["name"]} "

    options.each do |x,y|
        
        if y["value"] != ""
            # if the value is a path to a file
            if y["file"] != "no" and y["is_file"] == "yes"
                command += "#{x}=FILE#{cpt_file} #{cpt_file}=#{y['value']} "
                cpt_file += 1
            elsif x == "message"
                command += "-x ignore:mesg=\'#{y['value']}\' "
                # if the value is normal
            else
                command += "#{x}=#{y["value"]} "
            end
        end
    end
    # print the command for debug purpose
    puts command
    # execute patator with the command
    begin
        system(command)
    rescue SystemExit, Interrupt
        puts "yolo"
    rescue Exception => e
        puts "yolo2"
    end
end

# print the options for a module
def show_options(options, name)
    cpt_espace = 30
    options.each do |x,y|
        if y["value"].size > cpt_espace
            cpt_espace = y["value"].size + 7
        end
    end

    puts "\nOptions for module #{name}:\n"
    puts "#{"name".ljust(15)}#{"Current setting".ljust(cpt_espace)}#{"Required".ljust(15)}#{"Description"}"
    puts "#{"-----------".ljust(15)}#{"------------------".ljust(cpt_espace)}#{"-----------".ljust(15)}#{"--------------"}\n\n"

    options.each do |x,y|
        puts "#{x.ljust(15)}#{y["value"].ljust(cpt_espace)}#{y["required"].ljust(15)}#{y["desc"]}" 
    end
    puts "\n\n"
end

# get the options required for the module
def get_options(name)
    if $array_modules.key? name
        return $array_modules[name]
    else
        puts "The module doesn't exist"
        return false
    end
end

# test if the string is a path and if the file exist
def test_file(path)
    return File.file?(path)
end

# set the value for an options 
def set_options(options, args)
    set = false
    options.each do |x,y|
        if x == args[1]
            if y["file"] == "no"
                y["value"] = args[2]
                set = true
            elsif y["file"] == "yes" and test_file(args[2])
                y["value"] = args[2]
                y["is_file"] = "yes"
                set = true
            elsif y["file"] == "maybe"
                if not test_file(args[2])
                    puts "!! if the argument provided is a path, the file doesn't exist !!"
                else
                    y["is_file"] = "yes"
                end
                y["value"] = args[2]
                set = true
            end
        end
    end
    if not set 
        puts "Wrong option or the file specified doesn't exist "
    end
    return options
end

# check if all required options are set
def check_required(options)
    all_right = true
    options.each do |x,y|
        if y["required"] == "yes" and y["value"] == ""
            all_right = false
        end
    end
    return all_right
end

# loop to setup the options and run the command
def setup_module(module_name, options)
    exit = false
    options = JSON.parse(options) 

    until exit
        full_input = ask("#{module_name} >")
        if full_input == nil
            full_input = " "
        end
        args = full_input.split(" ")

        case args[0]
        when "back"
            exit = true
        when "quit"
            exit = true
            bye()
        when "show"
            show_options(options, module_name)
        when "run"
            if check_required(options)
                run(module_name, options)
            else
                puts "Some required options are not set"
            end
        when "set"
            options = set_options(options, args)
        else
            # Handle the empty input
        end
    end
end

#process the user inputs
def process(input)
    full_input = input
    args = input.split(" ")

    case args[0]
    when "quit"
        bye()
    when "help"
        displayHelp()
    when "modules"
        printModules()
    when "use"
        options = get_options(args[1])
        if options == false 
            puts "Wrong module"
        else
            setup_module(args[1], options)
        end
    else
        puts "Wrong options"
        displayHelp()
    end

end

def ask(name)
    #prompt = $prompt
    return $prompt.ask(name)
end


# Start he main 
greetings()

# main loop
while $running

    input = ask("AutoBrute > ")
    process(input)

end