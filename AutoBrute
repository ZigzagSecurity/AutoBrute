#!/usr/bin/ruby
##############################################################
##                  PatatorAuto V0.1                         #
##      Wrapper for Patator bruteforce tool                  #
##                                                           #
##          Created by ZigzagSecurity                        #
##                                                           #
##############################################################

require 'optionparser'
require 'colorize'
require 'tty-prompt'
require 'json'
require 'httparty'
require 'nokogiri'
require 'restclient'

# Welcome message
def greetings()
    puts " 
     _         _        ____             _       
    / \\  _   _| |_ ___ | __ ) _ __ _   _| |_ ___ 
   / _ \\| | | | __/ _ \\|  _ \\| '__| | | | __/ _ \\
  / ___ \\ |_| | || (_) | |_) | |  | |_| | ||  __/
 /_/   \\_\\__,_|\\__\\___/|____/|_|   \\__,_|\\__\\___|
                           by ZigzagSecurity V0.1 ".red

end

# Global variables
$running = true
# create the prompt
$prompt = TTY::Prompt.new
$modules = '{"ssh_module":{"desc":"Brute-force SSH","name":"ssh_login"},"ftp_module":{"desc":"Brute-force FTP","name":"ftp_login"}, "smb_module":{"desc":"Brute-force SMB","name":"smb_login"}, "zip_module":{"desc":"Brute-force ZIP file","name":"unzip_pass"}, "telnet_module":{"desc":"Brute-force telnet","name":"telnet_login"}, "smtp_module":{"desc":"Brute-force smtp","name":"smtp_login"}, "pop_module":{"desc":"Brute-force pop3","name":"pop_login"}, "imap_module":{"desc":"Brute-force imap4","name":"imap_login"}, "mssql_module":{"desc":"Brute-force mssql","name":"mssql_login"}, "rdp_module":{"desc":"Brute-force RDP (NLA)","name":"rdp_login"}, "http_module":{"desc":"Brute-force http form","name":"http_fuzz"}}'


# Options for each modules
$ssh_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"no","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"22","file":"no","is_file":"no"},"user":{"desc":"usernames to test (value or file)","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test (value or file)","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"auth_type":{"desc":"type of password authentication to use [password|keyboard-interactive|auto]","required":"no","value":"","file":"no","is_file":"no"},"keyfile":{"desc":"file with RSA, DSA or ECDSA private key to test","required":"no","value":"","file":"yes","is_file":"no"},"persistent":{"desc":"use persistent connections [1|0]","required":"no","value":"","file":"no","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"ignore:mesg=\'Authentication failed.\'","file":"no","is_file":"no"}}'
$ftp_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"no","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"21","file":"no","is_file":"no"},"user":{"desc":"usernames to test (value or file)","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test (value or file)","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"tls":{"desc":"use tls protocol or not [0|1]","required":"no","value":"","file":"no","is_file":"no"},"timeout":{"desc":"Seconds to wait for a response","required":"no","value":"","file":"no","is_file":"no"},"persistent":{"desc":"use persistent connections [1|0]","required":"no","value":"","file":"no","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"ignore:mesg=\'Login incorrect.\'","file":"no","is_file":"no"}}'
$smb_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"no","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"139","file":"no","is_file":"no"},"user":{"desc":"usernames to test (value or file)","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test (value or file)","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"password_hash":{"desc":"LM/NT hashes to test, at least one hash must be provided (\'lm:nt\' or \':nt\' or \'lm:\')","required":"no","value":"","file":"maybe","is_file":"no"},"domain":{"desc":"Domain to test","required":"no","value":"","file":"maybe","is_file":"no"},"persistent":{"desc":"use persistent connections [1|0]","required":"no","value":"","file":"no","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"ignore:fgrep=\'unknown user name or bad password\'","file":"no","is_file":"no"}}'
$zip_module ='{"zipfile":{"desc":"ZIP files to test","required":"yes","value":"","file":"yes","is_file":"no"},"password":{"desc":"passwords to test (value or file)","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"ignore:code!=0","file":"no","is_file":"no"}}'
$telnet_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"maybe","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"23","file":"no","is_file":"no"},"inputs":{"desc":"list of values to input","required":"yes","value":"FILE0\\\nFILE1","file":"no","is_file":"no"},"prompt_re":{"desc":"regular expression to match prompts [\w+:]","required":"yes","value":"Username:|Password:","file":"no","is_file":"no"},"timeout":{"desc":"seconds to wait for a response and for prompt_re to match received data [20]","required":"yes","value":"","file":"no","is_file":"no"},"persistent":{"desc":"use persistent connections [1|0]","required":"no","value":"","file":"no","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"ignore:egrep=\'Login incorrect.+Username:\'","file":"no","is_file":"no"}}'
$smtp_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"maybe","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"23","file":"no","is_file":"no"},"user":{"desc":"usernames to test","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"ssl":{"desc":"use SSL [0|1]","required":"no","value":"","file":"no","is_file":"no"},"helo":{"desc":"helo or ehlo command to send after connect [ehlo its.me.com]","required":"no","value":"","file":"no","is_file":"no"},"timeout":{"desc":"seconds to wait for a response [10]","required":"yes","value":"","file":"no","is_file":"no"},"persistent":{"desc":"use persistent connections [1|0]","required":"no","value":"","file":"no","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"ignore:fgrep=\'Authentication failed\'","file":"no","is_file":"no"}}'
$pop_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"maybe","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"110","file":"no","is_file":"no"},"user":{"desc":"usernames to test","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"ssl":{"desc":"use SSL [0|1]","required":"no","value":"","file":"no","is_file":"no"},"timeout":{"desc":"seconds to wait for a response and for prompt_re to match received data [10]","required":"yes","value":"","file":"no","is_file":"no"},"persistent":{"desc":"use persistent connections [1|0]","required":"no","value":"","file":"no","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"ignore:code=-ERR","file":"no","is_file":"no"}}'
$imap_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"maybe","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"110","file":"no","is_file":"no"},"user":{"desc":"usernames to test","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"ssl":{"desc":"use SSL [0|1]","required":"no","value":"","file":"no","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"ignore:code=-ERR","file":"no","is_file":"no"}}'
$mssql_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"maybe","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"110","file":"no","is_file":"no"},"user":{"desc":"usernames to test","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"windows_auth":{"desc":"use Windows auth [0|1]","required":"no","value":"","file":"no","is_file":"no"},"domain":{"desc":"domain to test []","required":"no","value":"","file":"no","is_file":"no"},"password_hash":{"desc":"LM/NT hashes to test (\'lm:nt\' or \':nt\')","required":"no","value":"","file":"maybe","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"ignore:fgrep=\'Login failed for user\'","file":"no","is_file":"no"}}'
$rdp_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"maybe","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"3389","file":"no","is_file":"no"},"user":{"desc":"usernames to test","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"","file":"no","is_file":"no"}}'
$http_module = '{"host":{"desc":"target host","required":"yes","value":"","file":"no","is_file":"no"},"port":{"desc":"target port","required":"yes","value":"80","file":"no","is_file":"no"},"user":{"desc":"usernames to test","required":"yes","value":"root","file":"maybe","is_file":"no"},"password":{"desc":"passwords to test","required":"yes","value":"passwd","file":"maybe","is_file":"no"},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"","file":"no","is_file":"no"}}'

# Array to keep the options for each module
$array_modules = {"ssh_module" => $ssh_module, "ftp_module" => $ftp_module, "smb_module" => $smb_module, "zip_module" => $zip_module, "telnet_module" => $telnet_module, "smtp_module" => $smtp_module, "pop_module" => $pop_module, "imap_module" => $imap_module, "mssql_module" => $mssql_module, "rdp_module" => $rdp_module, "http_module" => $http_module}

# End message
def bye()
    puts "Ok, bye !"
    $running = false
end

# Display the help
def displayHelp()
    puts
    puts "In the main menu:"
    puts "   help               Display this help"
    puts "   modules            Show the available modules"
    puts "   use [module name]  Use this module"
    puts "   quit               Exit the program"
    puts
    puts "In the configuration of a module :"
    puts "   show                       Show the options to configure"
    puts "   set [option name] [value]  Set a value for this option"
    puts "   run                        Execute this module"
    puts "   back                       Return to main menu"
    puts "   quit                       Exit the program"
    puts
end

#puts "#{"name".ljust(15)}#{"Current setting".ljust(cpt_espace)}#{"Required".ljust(15)}#{"Description"}"

# print the available modules
def printModules()
    modules = JSON.parse($modules)
    puts "\nAvailable modules:\n\n"
    modules.each do |x,y|
        puts "  - #{x}: #{y["desc"]}"
    end
    puts 
end

# execute the command
def run(module_name, options)
    cpt_file = 0
    modules = JSON.parse($modules)

    command = "patator #{modules[module_name]["name"]} "

    options.each do |x,y|
        
        if y["value"] != ""
            # if the value is a path to a file
            if y["file"] != "no" and y["is_file"] == "yes"
                command += "#{x}=FILE#{cpt_file} #{cpt_file}=#{y['value']} "
                cpt_file += 1
            elsif x == "message"
                command += "-x #{y['value']}"
                # if the value is normal
            else
                command += "#{x}=#{y["value"]} "
            end
        end
    end
    # print the command for debug purpose
    puts command
    # execute patator with the command
    begin
        system(command)
    rescue SystemExit, Interrupt
        puts "yolo"
    rescue Exception => e
        puts "yolo2"
    end
end

# print the options for a module
def show_options(options, name)
    cpt_espace = 30
    options.each do |x,y|
        if y["value"].size > cpt_espace
            cpt_espace = y["value"].size + 7
        end
    end

    puts "\nOptions for module #{name}:\n"
    puts "#{"name".ljust(15)}#{"Current setting".ljust(cpt_espace)}#{"Required".ljust(15)}#{"Description"}"
    puts "#{"-----------".ljust(15)}#{"------------------".ljust(cpt_espace)}#{"-----------".ljust(15)}#{"--------------"}\n\n"

    options.each do |x,y|
        puts "#{x.ljust(15)}#{y["value"].ljust(cpt_espace)}#{y["required"].ljust(15)}#{y["desc"]}" 
    end
    puts "\n\n"
end

# get the options required for the module
def get_options(name)
    if $array_modules.key? name
        return $array_modules[name]
    else
        puts "The module doesn't exist"
        return false
    end
end

# test if the string is a path and if the file exist
def test_file(path)
    return File.file?(path)
end

# set the value for an options 
def set_options(options, args)
    set = false
    options.each do |x,y|
        if x == args[1]
            if y["file"] == "no"
                y["value"] = args[2]
                set = true
            elsif y["file"] == "yes" and test_file(args[2])
                y["value"] = args[2]
                y["is_file"] = "yes"
                set = true
            elsif y["file"] == "maybe"
                if not test_file(args[2])
                    puts "!! if the argument provided is a path, the file doesn't exist !!"
                else
                    y["is_file"] = "yes"
                end
                y["value"] = args[2]
                set = true
            end
        end
    end
    if not set 
        puts "Wrong option or the file specified doesn't exist "
    end
    return options
end

# check if all required options are set
def check_required(options)
    all_right = true
    options.each do |x,y|
        if y["required"] == "yes" and y["value"] == ""
            all_right = false
        end
    end
    return all_right
end

# loop to setup the options and run the command
def setup_module(module_name, options)
    exit = false
    options = JSON.parse(options) 

    until exit
        full_input = ask("#{module_name} >")
        if full_input == nil
            full_input = " "
        end
        args = full_input.split(" ")

        case args[0]
        when "back"
            exit = true
        when "quit"
            exit = true
            bye()
        when "show"
            show_options(options, module_name)
        when "run"
            if check_required(options)
                run(module_name, options)
            else
                puts "Some required options are not set"
            end
        when "set"
            options = set_options(options, args)
        else
            # Handle the empty input
        end
    end
end

# Parse the target website to find the forms
def parseTarget(url)
    response = Nokogiri::HTML(RestClient.get(url))

    forms = response.css('form')
    puts "FOOOOOORMS"
    puts forms
    puts "FOOOOOORMS"
    puts "INPUUUUUUUUUUUUUUTS"
    inputs = forms.css('input')
    puts inputs
    puts "INPUUUUUUUUUUUUUUTS"

end

# execute the whole process for http_fuzz
def http_fuzz()
    # ask for the target
    # parse the target to find all the forms
    # show the forms and ask which one to bruteforce
    # parse the form to get the infos we need
    # get or post, args, body if post, ssrf token,
    # show the data found and organized
    # ask if everything is ok
    # permit to change stuff and add wordlist or redo everything for another target
    # run brute force

    url = ask("Give me the target url > ")
    #forms = parseTarget(url)
    forms = parseTarget("https://login.salesforce.com/")


end


#process the user inputs
def process(input)
    full_input = input
    args = input.split(" ")

    case args[0]
    when "quit"
        bye()
    when "help"
        displayHelp()
    when "modules"
        printModules()
    when "use"
        options = get_options(args[1])
        if options == false 
            puts "Wrong module"
        elsif args[1] == "http_module"
            http_fuzz()
        else
            setup_module(args[1], options)
        end
    else
        puts "Wrong options"
        displayHelp()
    end

end

def ask(name)
    #prompt = $prompt
    return $prompt.ask(name)
end


# Start he main 
greetings()

# main loop
while $running

    input = ask("AutoBrute > ")
    process(input)

end
