#!/usr/bin/ruby
##############################################################
##                  PatatorAuto V0.1                         #
##      Wrapper for Patator bruteforce tool                  #
##                                                           #
##          Created by ZigzagSecurity                        #
##                                                           #
##############################################################

require 'optionparser'
require 'colorize'
require 'tty-prompt'
require 'json'
#scrapper nokogiri
#open3 to execute command

# Welcome message
def greetings()
    puts " 
     _         _        ____             _       
    / \\  _   _| |_ ___ | __ ) _ __ _   _| |_ ___ 
   / _ \\| | | | __/ _ \\|  _ \\| '__| | | | __/ _ \\
  / ___ \\ |_| | || (_) | |_) | |  | |_| | ||  __/
 /_/   \\_\\__,_|\\__\\___/|____/|_|   \\__,_|\\__\\___|
                           by ZigzagSecurity V0.1 ".red

end

# Global variables
$running = true
# create the prompt
$prompt = TTY::Prompt.new
$modules = { "ssh_module" => "Brute-force SSH" }

# Options for each modules
$ssh_module = '{"host":{"desc":"target host","required":"yes","value":""},"port":{"desc":"target port","required":"yes","value":"22"},"user":{"desc":"usernames to test (value or file)","required":"yes","value":"root","file":"no"},"password":{"desc":"passwords to test (value or file)","required":"yes","value":"passwd","file":"no"},"auth_type":{"desc":"type of password authentication to use [password|keyboard-interactive|auto]","required":"no","value":""},"keyfile":{"desc":"file with RSA, DSA or ECDSA private key to test","required":"no","value":""},"persistent":{"desc":"use persistent connections [1|0]","required":"no","value":""},"message":{"desc":"Error message to expect when credentials are invalid","required":"yes","value":"Authentication failed"}}'

# End message
def bye()
    puts "Okei, bye !"
    $running = false
end

# Display the help
def displayHelp()
    puts "Here is the help"
end

# print the available modules
def printModules()
    puts "Available modules:\n"
    $modules.each do |x,y|
        puts "#{x}: #{y}"
    end
end

# execute the command
def run(module_name, options)
    cpt_file = 0
    #command = "patator ssh_login host=#{host} user=#{user} password=#{password} -x ignore:mesg='Authentication failed.'"
    command = "patator #{module_name} "

    options.each do |x,y|
        
        if y["value"] != ""
            # if the value is a path to a file
            if y.key?("file") and y["file"] == "yes"
                command += "#{x}=FILE#{cpt_file} #{cpt_file}=#{y['value']} "
                cpt_file += 1
            elsif x == "message"
                command += "-x ignore:mesg=\'#{y['value']}\' "
                # if the value is normal
            else
                command += "#{x}=#{y["value"]} "
            end
        end
    end
    # print the command for debug purpose
    puts command
    # execute patator with the command

end

# print the options for a module
def show_options(options, name)
    puts "\nOptions for module #{name}:\n\nName             Current setting              Required               Description\n-----------      -----------      -----------      -----------\n\n"

    options.each do |x,y|
        puts "#{x}          #{y["value"]}           #{y["required"]}               #{y["desc"]}" 
    end
    puts "\n\n"
end

# get the options required for the module
def get_options(name)
    case name
    when "ssh_module"
        return $ssh_module
    else
        ret
    end
end


# set the value for an options 
def set_options(options, args)
    set = false
    options.each do |x,y|
        if x == args[1]
            y["value"] = args[2]
            set = true
        end
    end
    if not set 
        puts "Wrong options" 
    end
    return options
end

# check if all required options are set
def check_required(options)
    all_right = true
    options.each do |x,y|
        if y["required"] == "yes" and y["value"] == ""
            all_right = false
        end
    end
    return all_right
end

# loop to setup the options and run the command
def setup_module(module_name)
    exit = false
    options = JSON.parse(get_options(module_name)) 

    until exit
        full_input = ask("#{module_name} >")
        args = full_input.split(" ")

        case args[0]
        when "back"
            exit = true
        when "quit"
            exit = true
            bye()
        when "show"
            show_options(options, module_name)
        when "run"
            if check_required(options)
                run(module_name, options)
            end
        when "set"
            options = set_options(options, args)
        end
    end
end

#process the user inputs
def process(input)
    full_input = input
    args = input.split(" ")

    case args[0]
    when "quit"
        bye()
    when "help"
        displayHelp()
    when "modules"
        printModules()
    when "use"
        setup_module(args[1])
    else
        puts "Wrong options"
        displayHelp()
    end

end

def ask(name)
    #prompt = $prompt
    return $prompt.ask(name)
end


# Start he main 
greetings()

# main loop
while $running

    input = ask("AutoBrute > ")
    process(input)

end